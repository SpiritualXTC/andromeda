// GLSL Globals : Define for all Shaders
//////////////////////////////
#extension GL_ARB_separate_shader_objects : enable


	


// Normal Rendering Mode
////////////////////////////
RasterizationState rasterStateNormal
{
    LINE_WIDTH = 1;
    POLYGON_MODE = {FRONT_AND_BACK, FILL};
}


// Wireframe Rendering Mode
////////////////////////////
RasterizationState rasterStateWireframe
{
    LINE_WIDTH = 1;
    POLYGON_MODE = {FRONT_AND_BACK, LINE};
}






// Matrix Constants
uniform mat4 u_projection;		// Projection Matrix
uniform mat4 u_modelview;		// ModelView Matrix

// Texture
uniform sampler2D u_texture;


uniform vec3 g_ambient;
uniform vec3 g_diffuse;
uniform vec3 g_specular;
uniform float g_opacity;


ConstantBuffer MATERIAL
{
	uniform vec3 ambient;
    uniform vec3 diffuse;
    uniform vec3 specular;
	uniform float opacity;
	
	
//	uniform sampler2D diffuseTexture;
	
//    uniform float    specexp;
//    uniform float    reflectivity;
//    uniform float    translucency;
};









// Vertex Shader
/////////////////
GLSLShader vertShader
{
	// Vertex Data
	layout(location=0) in vec4 a_position;
	layout(location=1) in vec3 a_normal;
	layout(location=2) in vec2 a_texture;

	// Pass along the Pipeline
    out gl_PerVertex 
	{
        vec4 gl_Position;
    };
	
	out vec2 v_texture;
	out vec3 v_normal;

	// Entry Point
	void main()
	{
		// Setup Varying Interpolation
		v_texture = a_texture;
		
		// Calculate Position
		gl_Position = u_projection * u_modelview * a_position;	
	}
}






// Filled Fragment Shader
//////////////////////
GLSLShader fragShaderFill
{
	// Passed Along the Pipe
	in vec2 v_texture;
	in vec3 v_normal;

	// Output
	out vec4 o_color;

	void main(void)
	{

		vec3 col = diffuse;

		// Set Output Color
		o_color = vec4(g_diffuse, 1);
		//o_color = vec4(diffuse, 1);//vec4(1.0, 1.0, 0.0, 1.0);
	}
}


// Wireframe Fragment Shader
//////////////////////
GLSLShader fragShaderWireframe
{
	// Output
	out vec4 o_color;

	void main(void)
	{
		// Set Output Color
		o_color = vec4(0.0, 1.0, 0.0, 1.0);
	}
}





Technique DEFAULT
{
	Pass FILL_PASS
	{
	//	DEPTH_TEST = 1;
		RasterizationState = rasterStateNormal;
		VertexProgram = vertShader;
		FragmentProgram = fragShaderFill;
	}
	
	Pass WIREFRAME_PASS
	{
	//	DEPTH_TEST = 0;
		RasterizationState = rasterStateWireframe;
		VertexProgram = vertShader;
		FragmentProgram = fragShaderWireframe;	
	}
}