   _____              .___                                .___       
  /  _  \   ____    __| _/______  ____   _____   ____   __| _/____   
 /  /_\  \ /    \  / __ |\_  __ \/  _ \ /     \_/ __ \ / __ |\__  \  
/    |    \   |  \/ /_/ | |  | \(  <_> )  Y Y  \  ___// /_/ | / __ \_
\____|__  /___|  /\____ | |__|   \____/|__|_|  /\___  >____ |(____  /
        \/     \/      \/                    \/     \/     \/     \/ 

 _______          __                 
 \      \   _____/  |_  ____   ______
 /   |   \ /  _ \   __\/ __ \ /  ___/
/    |    (  <_> )  | \  ___/ \___ \ 
\____|__  /\____/|__|  \___  >____  >
        \/                 \/     \/ 
                                     
                                     
Engine / System Modules:
------------------------
- A better system could be implemented for the core heirarchy :(
- Module Events:
	onPause():	Makes the System Inactive!	- WHen it is paused
	onResume():	Reactivates the System		- When it resumes use
	onStop():	Stops the System			- When it Gets removed from the sysem completely
	onStart():	Starts the System			- When it Gets added to the system
                                     
                                     
Platform / Context:
-------------------
Determine if this will be possible to completely remove all trace from teh Include Library :)

OR

Make some of the functions of the platforms protected, but still available to 'System' (Hide via an Interface OR Friend Class?)

Direct Access to Platform / Context could allow some undefined results :(






src/windows/platform/platform_windows.cpp:
 + WM_SIZING:	The Windows notification is the best one to use, however the better one (WM_WINDOWPOSCHANGED)
				is sent at a time, that could:
				 -	Worst Case: Cause an infinite loop
				 -	Best Case: Cause changeDisplaySettings to get called twice and potentially 
					filter down to the context resize. 
					And also fire off the resize event twice.
                                     

Initialisation:
---------------

Engine::Run() -> System::Run() -> Platform::Show()

Platform Show, needs to fire the resume events.

In Windows. This is done by calling ShowWindow(<HWND>, SW_SHOWNORMAL);
The Call to ShowWindow(...), internally fires the WM_ACTIVATEAPP window event, which then causes
System::Resume() -> Engine::Resume() to run.

Seriously! [It might be possible to remove System::Run(), and have Engine::Run(), call Platform::Show() Directly]



